Notes on Agent Refactor:
------------------------
1) Break agent apart into functional parts.
3) Break out plugin registering part.
5) Mock plugin registering up.
4) Add the ability to request list of plugins while running
5) Add a network interface to the agent.
6) Add auto loading to the database for testing. (Fix instruments error).
9) Move main functionality into class
10) Clean up and formalize plugin registration and communication.
11) Refactor out the network send to event manager.
12) Enumerate static event codes
13) Update Event Manager to always get a dictionary for data entry.
14) Refine tests on plugin registration
15) Make some fake agent plugins to test out process.

16) Need a way to drop instruments

Completed:
---------
1) Make Pyarmret a git submodule.
2) Move that submodule to the data share.
3) Add git submodule update to the initialization script.
4) Switch agent over to use the new pyarmret
10) Test set plugin paths
7) Add agent testing framework
8) Move agent into a module.
2) Turn Agent into an object, so that configurations can be added to it.
10) Mock up network site id request
4) Break plugin registering up to a single plugin at at time
13) Fix Break on groupadd docker on mac os



Agent Redesign Notes:
---------------------

1) Create central data structures
2) Add Dashboard
    1) Create flask App
    2) break app into thread
    3) Create dashboard
    4) Create HTML/CSS Page
3) Handle Plugin crashes
4) Create plugin registry
    1) Class for plugin registration
5) Redo Plugin registration
6) Config script for plugins
7) check plugin status



Plugin manager:
1) Register plugin
2) Start Plugin
3) Stop Plugin
4) Restart Plugin
5) List of active plugins
6) Store plugin classes
7) Track threads


Plugin class:
1) Store metadata about each class
2) Store pointer to each thread
3) Store plugin state?
4) Store path to each plugin
5) Knows how to operate on itself or dumb container?




Running TodoList:
-----------------
move startup_plugin to plugin manager
Plugins using built in methods
plugin registering data stream
rewrite existing plugins
Plugin Initialization.



Finished Running Todolist:
--------------------------
Plugin converted to class object



1) Create Plugin manager
1) Get a list of plugins into plugin manager
2) Register plugins
3) Start Plugins
4) Process Plugins


* Plugin Manager:
** Todo
   2. Handle Control Queue
   1. Multiple Plugin Managers
   2. Allow for Config Data in Plugins
   4. Stop/Restart a Plugin
   5. Convert Existing Plugins 
   
** Completed 
   
1. Be generated with instrument and site name. 
2. Take Directory of plugins and generate a list of all valid plugins.
1. Register Plugins
   1. Handle Register events


