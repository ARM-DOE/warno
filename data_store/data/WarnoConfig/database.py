from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine

engine = create_engine('postgresql://warno:warno@192.168.50.100:5432/warno')
Base = declarative_base()

class Site(Base):
    __tablename__ = 'sites'

    id = Column("site_id", Integer, primary_key = True)
    name_short = Column(String(8), nullable=False)
    name_long = Column(String)
    latitude = Column(Float)
    longitude = Column(Float)
    facility = Column(String(8))
    mobile = Column(Boolean)
    location_name = Column(String)

class User(Base):
    __tablename__ = "users"
    id = Column("user_id", Integer, primary_key = True)
    name = Column(String, nullable = False)
    email = Column("e-mail", String)
    location = Column(String)
    position = Column(String)
    password = Column(String)
    authorizations = Column(String)

class EventCode(Base):
    __tablename__ = "event_codes"

    event_code = Column(Integer, primary_key = True)
    description = Column(String, nullable = False)

class Instrument(Base):
    __tablename__  = "instruments"

    id = Column("instrument_id", Integer, primary_key = True)
    site_id = Column(Integer, ForeignKey('sites.site_id'))
    name_short = Column(String(8))
    name_long = Column(String)
    type = Column(String)
    vendor = Column(String)
    description = Column(String)
    frequency_band = Column(String(2))
    site = relationship(Site)

class InstrumentLog(Base):
    __tablename__ = "instrument_logs"

    id = Column("log_number", Integer, primary_key = True)
    time = Column(DateTime, nullable = False)
    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'))
    contents = Column(String)
    author_id = Column(Integer, ForeignKey('users.user_id'))
    status = Column(Integer)
    supporting_images = Column(String)
    instrument = relationship(Instrument)
    author = relationship(User)

class TableReference(Base):
    __tablename__ = "table_references"

    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'), primary_key = True)
    referenced_tables = Column(postgresql.ARRAY(String))
    instrument = relationship(Instrument)

class InstrumentDataReference(Base):
    __tablename__ = "instrument_data_references"

    instrument_data_reference_id = Column(Integer, primary_key = True)
    instrument_id = Column(ForeignKey('instruments.instrument_id'), nullable = False)
    special = Column(Boolean, nullable = False)
    description = Column(String)
    instrument = relationship(Instrument)


class PulseCapture(Base):
    __tablename__ = "pulse_captures"

    pulse_id = Column(Integer, primary_key = True)
    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'), nullable = False)
    time = Column(DateTime, nullable = False)
    data = Column(postgresql.ARRAY(Float))
    instrument = relationship(Instrument)

class EventsWithText(Base):
    __tablename__ = "events_with_text"

    event_id = Column(Integer, primary_key = True)
    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'), nullable = False)
    event_code_id = Column("event_code", Integer, ForeignKey('event_codes.event_code'), nullable = False)
    time = Column(DateTime, nullable = False)
    text = Column(String)
    instrument = relationship(Instrument)
    event_code = relationship(EventCode)

class EventsWithValue(Base):
    __tablename__ = "events_with_value"

    event_id = Column(Integer, primary_key = True)
    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'), nullable = False)
    event_code_id = Column("event_code", Integer, ForeignKey('event_codes.event_code'), nullable = False)
    time = Column(DateTime, nullable = False)
    value = Column(Float)
    instrument = relationship(Instrument)
    event_code = relationship(EventCode)

class ProsensingPAF(Base):
    __tablename__ = "prosensing_paf"
    id = Column("packet_id", Integer, primary_key = True)
    time = Column(DateTime, nullable = False)
    site_id = Column(Integer, ForeignKey('sites.site_id'), nullable = False)
    instrument_id = Column(Integer, ForeignKey('instruments.instrument_id'), nullable = False)

    site = relationship(Site)
    instrument = relationship(Instrument)

    ad_skip_count = Column(Integer)
    ad_skip_count_override = Column(Integer)
    ad_skip_count_use_override = Column(Integer)
    amplifier_drive_power_burst_a_dbm = Column(Float)
    amplifier_drive_power_burst_b_dbm = Column(Float)
    amplifier_drive_power_chirp_a_dbm = Column(Float)
    amplifier_drive_power_chirp_b_dbm = Column(Float)
    amplifier_output_power_burst_a_dbm = Column(Float)
    amplifier_output_power_burst_b_dbm = Column(Float)
    amplifier_output_power_chirp_a_dbm = Column(Float)
    amplifier_output_power_chirp_b_dbm = Column(Float)
    amplitude_scaling_burst_a = Column(Float)
    amplitude_scaling_burst_b = Column(Float)
    amplitude_scaling_chirp_a = Column(Float)
    amplitude_scaling_chirp_b = Column(Float)
    antenna_humidity = Column(Float)
    antenna_temp = Column(Float)
    asp_communication_error = Column(String)
    asp_connection = Column(String)
    asp_connection_error = Column(String)
    asp_custom_waveform_file_path_burst_a = Column(String)
    asp_custom_waveform_file_path_burst_b = Column(String)
    asp_custom_waveform_file_path_chirp_a = Column(String)
    asp_custom_waveform_file_path_chirp_b = Column(String)
    asp_status_summary = Column(String)
    asp_trig_delay_burst_a = Column(Float)
    asp_trig_delay_burst_a_override = Column(Integer)
    asp_trig_delay_burst_a_use_override = Column(Integer)
    asp_trig_delay_burst_b = Column(Float)
    asp_trig_delay_burst_b_override = Column(Integer)
    asp_trig_delay_burst_b_use_override = Column(Integer)
    asp_trig_delay_chirp_a = Column(Float)
    asp_trig_delay_chirp_a_override = Column(Integer)
    asp_trig_delay_chirp_a_use_override = Column(Integer)
    asp_trig_delay_chirp_b = Column(Float)
    asp_trig_delay_chirp_b_override = Column(Integer)
    asp_trig_delay_chirp_b_use_override = Column(Integer)
    asp_unrecognized_firmware = Column(String)
    asp_waveform_burst_a = Column(String)
    asp_waveform_burst_b = Column(String)
    asp_waveform_chirp_a = Column(String)
    asp_waveform_chirp_b = Column(String)
    attenuation_db_burst_a = Column(Integer)
    attenuation_db_burst_b = Column(Integer)
    attenuation_db_chirp_a = Column(Integer)
    attenuation_db_chirp_b = Column(Integer)
    auto_calculate_noise_regions = Column(Integer)
    auto_calculate_signal_regions = Column(Integer)
    bandwidth_burst_a = Column(Float)
    bandwidth_burst_b = Column(Float)
    bandwidth_chirp_a = Column(Float)
    bandwidth_chirp_b = Column(Float)
    cal_constant_burst_a_copol = Column(Float)
    cal_constant_burst_a_crosspol = Column(Float)
    cal_constant_burst_b_copol = Column(Float)
    cal_constant_burst_b_crosspol = Column(Float)
    cal_constant_chirp_a_copol = Column(Float)
    cal_constant_chirp_a_crosspol = Column(Float)
    cal_constant_chirp_b_copol = Column(Float)
    cal_constant_chirp_b_crosspol = Column(Float)
    cal_switch_enabled = Column(Integer)
    cal_switch_enabled_effective = Column(Integer)
    center_main_bang_burst_a = Column(Float)
    center_main_bang_burst_b = Column(Float)
    center_main_bang_chirp_a = Column(Float)
    center_main_bang_chirp_b = Column(Float)
    clutter_avg_len_a = Column(Integer)
    clutter_avg_len_b = Column(Integer)
    clutter_filter_enabled = Column(Integer)
    coherent_on_recv_enabled = Column(Integer)
    coherent_on_recv_gate_burst_a = Column(Integer)
    coherent_on_recv_gate_burst_b = Column(Integer)
    coherent_on_recv_gate_chirp_a = Column(Integer)
    coherent_on_recv_gate_chirp_b = Column(Integer)
    cold_noise_mw_burst_a_copol = Column(Float)
    cold_noise_mw_burst_a_crosspol = Column(Float)
    cold_noise_mw_burst_b_copol = Column(Float)
    cold_noise_mw_burst_b_crosspol = Column(Float)
    cold_noise_mw_chirp_a_copol = Column(Float)
    cold_noise_mw_chirp_a_crosspol = Column(Float)
    cold_noise_mw_chirp_b_copol = Column(Float)
    cold_noise_mw_chirp_b_crosspol = Column(Float)
    cold_noise_region_n_gates = Column(Integer)
    cold_noise_region_n_gates_override = Column(Integer)
    cold_noise_region_start_gate = Column(Integer)
    cold_noise_region_start_gate_override = Column(Integer)
    coolant_return_temp = Column(Float)
    coolant_supply_temp = Column(Float)
    data_trimming_enabled = Column(Integer)
    digrcv_filter_bandwidth_ch1 = Column(Float)
    digrcv_filter_bandwidth_ch2 = Column(Float)
    digrcv_filter_bandwidth_ch3 = Column(Float)
    digrcv_filter_bandwidth_ch4 = Column(Float)
    digrcv_filter_bandwidth_effective_ch1 = Column(Float)
    digrcv_filter_bandwidth_effective_ch2 = Column(Float)
    digrcv_filter_bandwidth_effective_ch3 = Column(Float)
    digrcv_filter_bandwidth_effective_ch4 = Column(Float)
    digrcv_fir_dec = Column(Integer)
    digrcv_fir_dec_effective = Column(Integer)
    digrcv_fir_filter_delay = Column(Float)
    eight_vdc = Column(Float)
    eika_temp = Column(Float)
    ems_1_override = Column(Integer)
    ems_1_override_effective = Column(Integer)
    ems_2_override = Column(Integer)
    ems_2_override_effective = Column(Integer)
    ems_delay = Column(Float)
    ems_delay_override = Column(Float)
    ems_delay_use_override = Column(Integer)
    ems_use_override = Column(Integer)
    ems_use_override_effective = Column(Integer)
    fft_len_a = Column(Integer)
    fft_len_b = Column(Integer)
    fft_taper = Column(Integer)
    fifteen_vdc = Column(Float)
    five_point_two_vdc = Column(Float)
    five_vdc = Column(Float)
    group_b_enabled = Column(Integer)
    group_b_enabled_effective = Column(Integer)
    hot_noise_mw_burst_a_copol = Column(Float)
    hot_noise_mw_burst_a_crosspol = Column(Float)
    hot_noise_mw_burst_b_copol = Column(Float)
    hot_noise_mw_burst_b_crosspol = Column(Float)
    hot_noise_mw_chirp_a_copol = Column(Float)
    hot_noise_mw_chirp_a_crosspol = Column(Float)
    hot_noise_mw_chirp_b_copol = Column(Float)
    hot_noise_mw_chirp_b_crosspol = Column(Float)
    hot_noise_region_n_gates = Column(Integer)
    hot_noise_region_n_gates_override = Column(Integer)
    hot_noise_region_start_gate = Column(Integer)
    hot_noise_region_start_gate_override = Column(Integer)
    incl_pitch = Column(Float)
    incl_roll = Column(Float)
    lna_copol_temp = Column(Float)
    lna_xpol_temp = Column(Float)
    max_sampled_range_burst_a = Column(Float)
    max_sampled_range_burst_b = Column(Float)
    max_sampled_range_chirp_a = Column(Float)
    max_sampled_range_chirp_b = Column(Float)
    max_velocity_m_sec_burst_a = Column(Float)
    max_velocity_m_sec_burst_b = Column(Float)
    max_velocity_m_sec_chirp_a = Column(Float)
    max_velocity_m_sec_chirp_b = Column(Float)
    minus_five_vdc = Column(Float)
    mod_blanked = Column(Integer)
    mod_fault_time = Column(Float)
    mod_has_fault = Column(Integer)
    mod_high_voltage_on = Column(Integer)
    mod_power_on = Column(Integer)
    mod_transmitting = Column(Integer)
    mod_warming_up = Column(Integer)
    modulator_external_temp = Column(Float)
    modulator_fault_interlock = Column(Integer)
    modulator_fault_mod = Column(Integer)
    modulator_fault_sum = Column(Integer)
    modulator_fault_sync = Column(Integer)
    modulator_fault_time_interlock = Column(Integer)
    modulator_fault_time_mod = Column(Integer)
    modulator_fault_time_sum = Column(Integer)
    modulator_fault_time_sync = Column(Integer)
    modulator_fault_time_transmitter_temp = Column(Integer)
    modulator_fault_transmitter_temp = Column(Integer)
    modulator_filament_delay = Column(Integer)
    modulator_hv_on_command = Column(Integer)
    modulator_power_on_command = Column(Integer)
    modulator_power_valid = Column(Integer)
    modulator_sync_divider = Column(Integer)
    modulator_sync_enabled = Column(Integer)
    modulator_sync_frequency = Column(Integer)
    modulator_temp = Column(Float)
    moments_fixed_roi_width_m_sec = Column(Integer)
    moments_power_threshold_db = Column(Float)
    moments_roi_mode = Column(Integer)
    n_gates = Column(Integer)
    n_gates_proc_burst_a = Column(Integer)
    n_gates_proc_burst_b = Column(Integer)
    n_gates_proc_chirp_a = Column(Integer)
    n_gates_proc_chirp_b = Column(Integer)
    n_group_pulses_a = Column(Integer)
    n_group_pulses_b = Column(Integer)
    noise_delay = Column(Float)
    noise_delay_override = Column(Float)
    noise_delay_use_override = Column(Integer)
    noise_figure_db_burst_a_copol = Column(Float)
    noise_figure_db_burst_a_crosspol = Column(Float)
    noise_figure_db_burst_b_copol = Column(Float)
    noise_figure_db_burst_b_crosspol = Column(Float)
    noise_figure_db_chirp_a_copol = Column(Float)
    noise_figure_db_chirp_a_crosspol = Column(Float)
    noise_figure_db_chirp_b_copol = Column(Float)
    noise_figure_db_chirp_b_crosspol = Column(Float)
    noise_region_n_gates_nominal = Column(Integer)
    noise_scale_factor_burst_a = Column(Float)
    noise_scale_factor_burst_b = Column(Float)
    noise_scale_factor_chirp_a = Column(Float)
    noise_scale_factor_chirp_b = Column(Float)
    noise_scale_factor_effective_burst_a = Column(Float)
    noise_scale_factor_effective_burst_b = Column(Float)
    noise_scale_factor_effective_chirp_a = Column(Float)
    noise_scale_factor_effective_chirp_b = Column(Float)
    noise_width = Column(Float)
    noise_width_override = Column(Integer)
    noise_width_use_override = Column(Integer)
    outside_air_temp = Column(Float)
    pentek_open = Column(String)
    pentek_open_failed = Column(String)
    pentek_receiving_data = Column(String)
    pentek_run_failed = Column(String)
    pentek_running = Column(String)
    pentek_status_summary = Column(String)
    plo1_lock_status = Column(Integer)
    plo2_lock_status = Column(Integer)
    plo3_lock_status = Column(Integer)
    plo4_lock_status = Column(Integer)
    post_avg_len = Column(Integer)
    power_supply_temp = Column(Float)
    pri_a = Column(Float)
    pri_b = Column(Float)
    pulse_compression_ratio_burst_a = Column(Float)
    pulse_compression_ratio_burst_b = Column(Float)
    pulse_compression_ratio_chirp_a = Column(Float)
    pulse_compression_ratio_chirp_b = Column(Float)
    pulse_compression_ratio_effective_burst_a = Column(Float)
    pulse_compression_ratio_effective_burst_b = Column(Float)
    pulse_compression_ratio_effective_chirp_a = Column(Float)
    pulse_compression_ratio_effective_chirp_b = Column(Float)
    range_gate_spacing = Column(Float)
    range_gate_spacing_proc = Column(Float)
    range_resolution_burst_a = Column(Float)
    range_resolution_burst_b = Column(Float)
    range_resolution_chirp_a = Column(Float)
    range_resolution_chirp_b = Column(Float)
    range_resolution_effective_burst_a = Column(Float)
    range_resolution_effective_burst_b = Column(Float)
    range_resolution_effective_chirp_a = Column(Float)
    range_resolution_effective_chirp_b = Column(Float)
    rcb_communication_error = Column(String)
    rcb_connection = Column(String)
    rcb_connection_error = Column(String)
    rcb_humidity = Column(Float)
    rcb_status_summary = Column(String)
    rcb_status_valid = Column(Integer)
    rcb_temp = Column(Float)
    rcb_unrecognized_firmware = Column(String)
    reverse_pwr_load_temp = Column(Float)
    rf_unit_output_power_burst_a_dbm = Column(Float)
    rf_unit_output_power_burst_b_dbm = Column(Float)
    rf_unit_output_power_chirp_a_dbm = Column(Float)
    rf_unit_output_power_chirp_b_dbm = Column(Float)
    rf_unit_temp = Column(Float)
    rtd14 = Column(Float)
    rtd15 = Column(Float)
    rtd16 = Column(Float)
    rtd6 = Column(Float)
    rtd7 = Column(Float)
    rtd8 = Column(Float)
    rx_gain_db_burst_a_copol = Column(Float)
    rx_gain_db_burst_a_crosspol = Column(Float)
    rx_gain_db_burst_b_copol = Column(Float)
    rx_gain_db_burst_b_crosspol = Column(Float)
    rx_gain_db_chirp_a_copol = Column(Float)
    rx_gain_db_chirp_a_crosspol = Column(Float)
    rx_gain_db_chirp_b_copol = Column(Float)
    rx_gain_db_chirp_b_crosspol = Column(Float)
    scope_communication_error = Column(String)
    scope_connection = Column(String)
    scope_connection_error = Column(String)
    scope_lookup_table_missing = Column(String)
    scope_status_summary = Column(String)
    server_mode = Column(Integer)
    server_state = Column(Integer)
    signal_region_n_gates_a = Column(Integer)
    signal_region_n_gates_a_override = Column(Integer)
    signal_region_n_gates_b = Column(Integer)
    signal_region_n_gates_b_override = Column(Integer)
    signal_region_start_gate_a = Column(Integer)
    signal_region_start_gate_a_override = Column(Integer)
    signal_region_start_gate_b = Column(Integer)
    signal_region_start_gate_b_override = Column(Integer)
    sky_noise_mw_burst_a_copol = Column(Float)
    sky_noise_mw_burst_a_crosspol = Column(Float)
    sky_noise_mw_burst_b_copol = Column(Float)
    sky_noise_mw_burst_b_crosspol = Column(Float)
    sky_noise_mw_chirp_a_copol = Column(Float)
    sky_noise_mw_chirp_a_crosspol = Column(Float)
    sky_noise_mw_chirp_b_copol = Column(Float)
    sky_noise_mw_chirp_b_crosspol = Column(Float)
    sky_noise_region_n_gates = Column(Integer)
    sky_noise_region_n_gates_override = Column(Integer)
    sky_noise_region_start_gate = Column(Integer)
    sky_noise_region_start_gate_override = Column(Integer)
    software_dec = Column(Integer)
    software_filter_burst_a = Column(String)
    software_filter_burst_b = Column(String)
    software_filter_chirp_a = Column(String)
    software_filter_chirp_b = Column(String)
    software_filter_file_path_burst_a = Column(String)
    software_filter_file_path_burst_b = Column(String)
    software_filter_file_path_chirp_a = Column(String)
    software_filter_file_path_chirp_b = Column(String)
    software_filter_output_trimming_power_threshold = Column(Float)
    tukey_coef_burst_a = Column(Float)
    tukey_coef_burst_b = Column(Float)
    tukey_coef_chirp_a = Column(Float)
    tukey_coef_chirp_b = Column(Float)
    tukey_coef_effective_burst_a = Column(Float)
    tukey_coef_effective_burst_b = Column(Float)
    tukey_coef_effective_chirp_a = Column(Float)
    tukey_coef_effective_chirp_b = Column(Float)
    tukey_correction_burst_a = Column(Float)
    tukey_correction_burst_b = Column(Float)
    tukey_correction_chirp_a = Column(Float)
    tukey_correction_chirp_b = Column(Float)
    twelve_vdc = Column(Float)
    twenty_eight_vdc = Column(Float)
    tx_freq_burst = Column(Float)
    tx_freq_chirp = Column(Float)
    tx_pulse_bracketing = Column(Float)
    tx_pulse_n_gates_burst_a = Column(Integer)
    tx_pulse_n_gates_burst_b = Column(Integer)
    tx_pulse_n_gates_chirp_a = Column(Integer)
    tx_pulse_n_gates_chirp_b = Column(Integer)
    tx_pulse_start_gate_burst_a = Column(Integer)
    tx_pulse_start_gate_burst_b = Column(Integer)
    tx_pulse_start_gate_chirp_a = Column(Integer)
    tx_pulse_start_gate_chirp_b = Column(Integer)
    tx_pulse_width_a = Column(Float)
    tx_pulse_width_b = Column(Float)
    tx_trigger_delay = Column(Float)
    tx_trigger_enabled = Column(Integer)
    tx_trigger_enabled_effective = Column(Integer)
    use_digrcv_default_filter_ch1 = Column(Integer)
    use_digrcv_default_filter_ch2 = Column(Integer)
    use_digrcv_default_filter_ch3 = Column(Integer)
    use_digrcv_default_filter_ch4 = Column(Integer)
    use_digrcv_default_filter_effective_ch1 = Column(Integer)
    use_digrcv_default_filter_effective_ch2 = Column(Integer)
    use_digrcv_default_filter_effective_ch3 = Column(Integer)
    use_digrcv_default_filter_effective_ch4 = Column(Integer)
    use_software_filter_parameters = Column(Integer)
    velocity_spacing_m_sec_burst_a = Column(Float)
    velocity_spacing_m_sec_burst_b = Column(Float)
    velocity_spacing_m_sec_chirp_a = Column(Float)
    velocity_spacing_m_sec_chirp_b = Column(Float)
    width_burst_a = Column(Float)
    width_burst_b = Column(Float)
    width_chirp_a = Column(Float)
    width_chirp_b = Column(Float)
    zero_gate_range_proc_burst_a = Column(Float)
    zero_gate_range_proc_burst_b = Column(Float)
    zero_gate_range_proc_chirp_a = Column(Float)
    zero_gate_range_proc_chirp_b = Column(Float)
    zero_gate_time = Column(Float)
    zero_raw_gate_range_burst_a = Column(Float)
    zero_raw_gate_range_burst_b = Column(Float)
    zero_raw_gate_range_chirp_a = Column(Float)
    zero_raw_gate_range_chirp_b = Column(Float)
    zero_raw_gate_range_offset_burst_a = Column(Integer)
    zero_raw_gate_range_offset_burst_b = Column(Integer)
    zero_raw_gate_range_offset_chirp_a = Column(Integer)
    zero_raw_gate_range_offset_chirp_b = Column(Integer)