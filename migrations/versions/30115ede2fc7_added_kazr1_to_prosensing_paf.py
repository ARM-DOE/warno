"""Added KAZR1 to prosensing_paf

Revision ID: 30115ede2fc7
Revises: 37b800d049f7
Create Date: 2016-06-28 15:33:50.135812

"""

# revision identifiers, used by Alembic.
revision = '30115ede2fc7'
down_revision = '37b800d049f7'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    op.add_column('prosensing_paf', sa.Column('one_twenty_mhz_plo_lock', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sixteen_twenty_mhz_plo_lock', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('one_sixty_five_sixty_mhz_plo_lock', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('three_sixty_mhz_plo_lock', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('ad_skip_count_ch1', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('ad_skip_count_ch2', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('antenna_feedhorn_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('asp_internal_delay', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_amplitude_scaling', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_attenuation_db', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_freq', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_range_resolution', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_tukey_coef', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('burst_width', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cathode_voltage', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('chirp_range_resolution', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('chirp_width', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cic_dec', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('clutter_filter_len_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('clutter_filter_len_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('clutter_filter_window_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('clutter_filter_window_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('coherent_on_recv_before_sw_filter', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('coherent_on_recv_gate_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('coherent_on_recv_gate_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cold_noise_burst_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cold_noise_burst_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cold_noise_chirp_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('cold_noise_chirp_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('collector_voltage', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('component_plate_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('counts_to_voltage_scale', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('digrcv_fir_gain', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('digrcv_nco_freq_burst', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('digrcv_nco_freq_chirp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('ems_3_override', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('ems_delay_a', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('ems_delay_b', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('fan_ki', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('fan_kp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('fan_mode', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('fan_sp_celcius', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('fault_flags', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('filament_voltage', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('five_vdc_0', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('five_vdc_1', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('four_port_circulator_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('group_a_enabled', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('heater_ki', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('heater_mode', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('heater_sp_celcius', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('helix_current', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('hot_noise_burst_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('hot_noise_burst_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('hot_noise_chirp_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('hot_noise_chirp_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('lna_1_on', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('lna_2_on', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('lna_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('min_auto_fan_speed', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('moments_pwr_threshold_db', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('n_gates_proc_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('n_gates_proc_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('n_group_pulses_total', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_delay_a', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_delay_b', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_diode_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_region_len_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_region_len_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_region_offset_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_region_offset_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_width_a', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('noise_width_b', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pid_parameters_temp_ctl', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pri_average', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pri_group_total', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_filepath_ch1', sa.String(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_filepath_ch2', sa.String(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_input_offset_index_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_input_offset_index_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_len_ratio_burst', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_len_ratio_chirp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_len_samps_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_len_samps_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_offset_index_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_offset_index_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_offset_ratio_burst', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('pulse_filter_output_offset_ratio_chirp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('range_offset_burst', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('range_offset_chirp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('rcb_mode_if_running', sa.String(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('rcb_temperature', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('record_raw_iq', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_a_1', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_a_2', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_a_3', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_a_4', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_b_1', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_b_2', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_b_3', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_b_4', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('scope_delay_zero', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('signal_region_len_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('signal_region_len_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('signal_region_offset_burst', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('signal_region_offset_chirp', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sky_noise_burst_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sky_noise_burst_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sky_noise_chirp_a', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sky_noise_chirp_b', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('sum_powers', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('timing_mode', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_internal_delay', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_latest_fault_time', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_powered_on', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_pulse_bracketing', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_pulse_width_a', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_pulse_width_b', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_remote_control_enabled', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_state', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_status_is_valid', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_temp', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_trig_delay_a', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('twta_trig_delay_b', sa.Integer(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('zero_gate_range_burst', sa.Float(), nullable=True))
    op.add_column('prosensing_paf', sa.Column('zero_gate_range_chirp', sa.Float(), nullable=True))


def downgrade():
    op.drop_column('prosensing_paf', '120_mhz_plo_lock')
    op.drop_column('prosensing_paf', '1620_mhz_plo_lock')
    op.drop_column('prosensing_paf', '16560_mhz_plo_lock')
    op.drop_column('prosensing_paf', '360_mhz_plo_lock')
    op.drop_column('prosensing_paf', 'ad_skip_count_ch1')
    op.drop_column('prosensing_paf', 'ad_skip_count_ch2')
    op.drop_column('prosensing_paf', 'antenna_feedhorn_temp')
    op.drop_column('prosensing_paf', 'asp_internal_delay')
    op.drop_column('prosensing_paf', 'burst_amplitude_scaling')
    op.drop_column('prosensing_paf', 'burst_attenuation_db')
    op.drop_column('prosensing_paf', 'burst_freq')
    op.drop_column('prosensing_paf', 'burst_range_resolution')
    op.drop_column('prosensing_paf', 'burst_tukey_coef')
    op.drop_column('prosensing_paf', 'burst_width')
    op.drop_column('prosensing_paf', 'cathode_voltage')
    op.drop_column('prosensing_paf', 'chirp_range_resolution')
    op.drop_column('prosensing_paf', 'chirp_width')
    op.drop_column('prosensing_paf', 'cic_dec')
    op.drop_column('prosensing_paf', 'clutter_filter_len_burst')
    op.drop_column('prosensing_paf', 'clutter_filter_len_chirp')
    op.drop_column('prosensing_paf', 'clutter_filter_window_burst')
    op.drop_column('prosensing_paf', 'clutter_filter_window_chirp')
    op.drop_column('prosensing_paf', 'coherent_on_recv_before_sw_filter')
    op.drop_column('prosensing_paf', 'coherent_on_recv_gate_burst')
    op.drop_column('prosensing_paf', 'coherent_on_recv_gate_chirp')
    op.drop_column('prosensing_paf', 'cold_noise_burst_a')
    op.drop_column('prosensing_paf', 'cold_noise_burst_b')
    op.drop_column('prosensing_paf', 'cold_noise_chirp_a')
    op.drop_column('prosensing_paf', 'cold_noise_chirp_b')
    op.drop_column('prosensing_paf', 'collector_voltage')
    op.drop_column('prosensing_paf', 'component_plate_temp')
    op.drop_column('prosensing_paf', 'counts_to_voltage_scaleX')
    op.drop_column('prosensing_paf', 'digrcv_fir_gain')
    op.drop_column('prosensing_paf', 'digrcv_nco_freq_burst')
    op.drop_column('prosensing_paf', 'digrcv_nco_freq_chirp')
    op.drop_column('prosensing_paf', 'ems_3_override')
    op.drop_column('prosensing_paf', 'ems_delay_a')
    op.drop_column('prosensing_paf', 'ems_delay_b')
    op.drop_column('prosensing_paf', 'fan_ki')
    op.drop_column('prosensing_paf', 'fan_kp')
    op.drop_column('prosensing_paf', 'fan_mode')
    op.drop_column('prosensing_paf', 'fan_sp_celciusX')
    op.drop_column('prosensing_paf', 'fault_flags')
    op.drop_column('prosensing_paf', 'filament_voltage')
    op.drop_column('prosensing_paf', 'five_vdc_0')
    op.drop_column('prosensing_paf', 'five_vdc_1')
    op.drop_column('prosensing_paf', 'four_port_circulator_temp')
    op.drop_column('prosensing_paf', 'group_a_enabled')
    op.drop_column('prosensing_paf', 'heater_ki')
    op.drop_column('prosensing_paf', 'heater_mode')
    op.drop_column('prosensing_paf', 'heater_sp_celciusX')
    op.drop_column('prosensing_paf', 'helix_current')
    op.drop_column('prosensing_paf', 'hot_noise_burst_a')
    op.drop_column('prosensing_paf', 'hot_noise_burst_b')
    op.drop_column('prosensing_paf', 'hot_noise_chirp_a')
    op.drop_column('prosensing_paf', 'hot_noise_chirp_b')
    op.drop_column('prosensing_paf', 'lna_1_on')
    op.drop_column('prosensing_paf', 'lna_2_on')
    op.drop_column('prosensing_paf', 'lna_temp')
    op.drop_column('prosensing_paf', 'min_auto_fan_speed')
    op.drop_column('prosensing_paf', 'moments_pwr_threshold_db')
    op.drop_column('prosensing_paf', 'n_gates_proc_burst')
    op.drop_column('prosensing_paf', 'n_gates_proc_chirp')
    op.drop_column('prosensing_paf', 'n_group_pulses_total')
    op.drop_column('prosensing_paf', 'noise_delay_a')
    op.drop_column('prosensing_paf', 'noise_delay_b')
    op.drop_column('prosensing_paf', 'noise_diode_temp')
    op.drop_column('prosensing_paf', 'noise_region_len_burst')
    op.drop_column('prosensing_paf', 'noise_region_len_chirp')
    op.drop_column('prosensing_paf', 'noise_region_offset_burst')
    op.drop_column('prosensing_paf', 'noise_region_offset_chirp')
    op.drop_column('prosensing_paf', 'noise_width_a')
    op.drop_column('prosensing_paf', 'noise_width_b')
    op.drop_column('prosensing_paf', 'pid_parameters_temp_ctl')
    op.drop_column('prosensing_paf', 'pri_average')
    op.drop_column('prosensing_paf', 'pri_group_total')
    op.drop_column('prosensing_paf', 'pulse_filter_filepath_ch1')
    op.drop_column('prosensing_paf', 'pulse_filter_filepath_ch2')
    op.drop_column('prosensing_paf', 'pulse_filter_input_offset_index_burst')
    op.drop_column('prosensing_paf', 'pulse_filter_input_offset_index_chirp')
    op.drop_column('prosensing_paf', 'pulse_filter_output_len_ratio_burst')
    op.drop_column('prosensing_paf', 'pulse_filter_output_len_ratio_chirp')
    op.drop_column('prosensing_paf', 'pulse_filter_output_len_samps_burst')
    op.drop_column('prosensing_paf', 'pulse_filter_output_len_samps_chirp')
    op.drop_column('prosensing_paf', 'pulse_filter_output_offset_index_burst')
    op.drop_column('prosensing_paf', 'pulse_filter_output_offset_index_chirp')
    op.drop_column('prosensing_paf', 'pulse_filter_output_offset_ratio_burst')
    op.drop_column('prosensing_paf', 'pulse_filter_output_offset_ratio_chirp')
    op.drop_column('prosensing_paf', 'range_offset_burst')
    op.drop_column('prosensing_paf', 'range_offset_chirp')
    op.drop_column('prosensing_paf', 'rcb_mode_if_running')
    op.drop_column('prosensing_paf', 'rcb_temperature')
    op.drop_column('prosensing_paf', 'record_raw_iq')
    op.drop_column('prosensing_paf', 'scope_delay_a_1')
    op.drop_column('prosensing_paf', 'scope_delay_a_2')
    op.drop_column('prosensing_paf', 'scope_delay_a_3')
    op.drop_column('prosensing_paf', 'scope_delay_a_4')
    op.drop_column('prosensing_paf', 'scope_delay_b_1')
    op.drop_column('prosensing_paf', 'scope_delay_b_2')
    op.drop_column('prosensing_paf', 'scope_delay_b_3')
    op.drop_column('prosensing_paf', 'scope_delay_b_4')
    op.drop_column('prosensing_paf', 'scope_delay_zero')
    op.drop_column('prosensing_paf', 'signal_region_len_burst')
    op.drop_column('prosensing_paf', 'signal_region_len_chirp')
    op.drop_column('prosensing_paf', 'signal_region_offset_burst')
    op.drop_column('prosensing_paf', 'signal_region_offset_chirp')
    op.drop_column('prosensing_paf', 'sky_noise_burst_a')
    op.drop_column('prosensing_paf', 'sky_noise_burst_b')
    op.drop_column('prosensing_paf', 'sky_noise_chirp_a')
    op.drop_column('prosensing_paf', 'sky_noise_chirp_b')
    op.drop_column('prosensing_paf', 'sum_powers')
    op.drop_column('prosensing_paf', 'timing_mode')
    op.drop_column('prosensing_paf', 'twta_internal_delay')
    op.drop_column('prosensing_paf', 'twta_latest_fault_time')
    op.drop_column('prosensing_paf', 'twta_powered_on')
    op.drop_column('prosensing_paf', 'twta_pulse_bracketing')
    op.drop_column('prosensing_paf', 'twta_pulse_width_a')
    op.drop_column('prosensing_paf', 'twta_pulse_width_b')
    op.drop_column('prosensing_paf', 'twta_remote_control_enabled')
    op.drop_column('prosensing_paf', 'twta_state')
    op.drop_column('prosensing_paf', 'twta_status_is_valid')
    op.drop_column('prosensing_paf', 'twta_temp')
    op.drop_column('prosensing_paf', 'twta_trig_delay_a')
    op.drop_column('prosensing_paf', 'twta_trig_delay_b')
    op.drop_column('prosensing_paf', 'zero_gate_range_burst')
    op.drop_column('prosensing_paf', 'zero_gate_range_chirp')
